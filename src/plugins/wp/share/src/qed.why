(**************************************************************************)
(*                                                                        *)
(*  This file is part of TrustInSoft Kernel.                              *)
(*                                                                        *)
(*  TrustInSoft Kernel is a fork of Frama-C. All the differences are:     *)
(*    Copyright (C) 2016-2017 TrustInSoft                                 *)
(*                                                                        *)
(*  TrustInSoft Kernel is released under GPLv2                            *)
(*                                                                        *)
(**************************************************************************)

(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2015                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

theory Qed

  use import bool.Bool
  use import int.Int
  use import real.RealInfix
  use import real.FromInt
  use import int.ComputerDivision as CD

  (** to be used only for the ACSL ite generation.
      Something is wrong with "wp/share/ergo/bool.Bool.mlw" (comming from why3),
      the function match_bool is undefined.  
      An hack is to give a definition here. *)
  function match_bool (x : bool) (y z:'a ) : 'a
  axiom match_bool: forall p:bool, x:'a, y:'a [match_bool p x y].
   ( p=True /\ match_bool p x y=x ) ||
   ( p=False /\ match_bool p x y=y )
  meta "remove_for_why3" prop match_bool

  (** The definitions are in comment because its not useful for coq
  (no if-then-else on formula) and not tested on automatic provers *)

  function eqb (x y : 'a) : bool (*= if x = y then True else False*)
  axiom eqb : forall x:'a, y:'a. eqb x y = True <-> x = y

  axiom eqb_false : forall x:'a, y:'a. eqb x y = False <-> x <> y
  meta "remove_for_" prop eqb_false

  function neqb (x y : 'a) : bool(* = if x <> y then True else False*)
  axiom neqb : forall x:'a, y:'a. neqb x y = True <-> x <> y

  function zlt  (x y : int) : bool(* = if x < y  then True else False*)
  function zleq (x y : int) : bool(* = if x <= y then True else False*)

  axiom zlt  : forall x:int, y:int. zlt  x y = True <-> x < y
  axiom zleq : forall x:int, y:int. zleq x y = True <-> x <= y

  function rlt  (x y : real) : bool(* = if x <. y   then True else False*)
  function rleq (x y : real) : bool(* = if x <=. y  then True else False*)

  axiom rlt  : forall x:real, y:real. rlt  x y = True <-> x <. y
  axiom rleq : forall x:real, y:real. rleq x y = True <-> x <=. y

  function truncate (x:real) : int
  function real_of_int (x:int) : real = FromInt.from_int x
  meta "inline : no" function real_of_int

  axiom truncate_of_int: forall x:int. truncate (real_of_int x) = x

  (* -------------------------------------------------------------------------- *)
  (* --- Division safe with a prover using computer or euclidean division   --- *)
  (* -------------------------------------------------------------------------- *)

  (* pdiv and pmod are the prover operation (safe only on positive number *)
  function pdiv (n d : int) : int
  function pmod (n d : int) : int

  axiom c_euclidian : forall n d:int [(CD.div n d),(CD.mod n d)].
    d <> 0 -> n = CD.div n d * d + CD.mod n d

  axiom cdiv_cases : forall n d:int [CD.div n d].
    ((n >= 0) -> (d > 0) -> CD.div n d = pdiv n d) /\
    ((n <= 0) -> (d > 0) -> CD.div n d = -(pdiv (-n) d)) /\
    ((n >= 0) -> (d < 0) -> CD.div n d = -(pdiv n (-d))) /\
    ((n <= 0) -> (d < 0) -> CD.div n d = pdiv (-n) (-d))

  axiom cmod_cases : forall n d:int [CD.mod n d].
    ((n >= 0) -> (d > 0) -> CD.mod n d = pmod n d) /\
    ((n <= 0) -> (d > 0) -> CD.mod n d = -(pmod (-n) d)) /\
    ((n >= 0) -> (d < 0) -> CD.mod n d = (pmod n (-d))) /\
    ((n <= 0) -> (d < 0) -> CD.mod n d = -(pmod (-n) (-d)))

  axiom cmod_remainder : forall n d:int [CD.mod n d].
    ((n >= 0) -> (d > 0) ->  0 <= CD.mod n d <  d) /\
    ((n <= 0) -> (d > 0) -> -d <  CD.mod n d <= 0) /\
    ((n >= 0) -> (d < 0) ->  0 <= CD.mod n d < -d) /\
    ((n <= 0) -> (d < 0) ->  d <  CD.mod n d <= 0)

  axiom cdiv_neutral : forall a:int [CD.div a 1]. CD.div a 1 = a
  axiom cdiv_inv : forall a:int [CD.div a a]. a<>0 -> CD.div a a = 1

end
